// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Location List Component should render correctly with a few routes 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LocationList
    distance="10"
    domicileId={1}
    loadHandler={[MockFunction]}
    maxDistance={1}
    removeHandler={[MockFunction]}
    route={
      Array [
        Object {
          "id": 1,
          "lat": 1.345678,
          "lng": 1.345678,
        },
        Object {
          "id": 2,
          "lat": 2.345678,
          "lng": 2.345678,
        },
        Object {
          "id": 3,
          "lat": 3.676111,
          "lng": 3.568333,
        },
      ]
    }
    selectHandler={[MockFunction]}
    ws={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="leaflet-control leaflet-bar"
      >
        <Card
          className=""
          component="article"
        >
          <CardHeader
            className=""
            component="div"
          >
            Distance: 
            10
            <br />
            Locations: 
            3
            <TripData
              distance={10}
              maxDistance={1}
            />
            <hr />
          </CardHeader>
          <CardBody
            className=""
            component="div"
          >
            <div
              style={
                Object {
                  "maxHeight": "calc(100vh - 195px)",
                  "overflowY": "auto",
                }
              }
            >
              <Location
                id={1}
                removeDisabled={true}
                removeHandler={[MockFunction]}
                selectHandler={[MockFunction]}
              />
              <Location
                id={2}
                removeDisabled={false}
                removeHandler={[MockFunction]}
                selectHandler={[MockFunction]}
              />
              <Location
                id={3}
                removeDisabled={false}
                removeHandler={[MockFunction]}
                selectHandler={[MockFunction]}
              />
            </div>
          </CardBody>
        </Card>
      </div>,
      "className": "leaflet-top leaflet-left leaflet-touch",
      "style": Object {
        "zIndex": 500,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Card
          className=""
          component="article"
        >
          <CardHeader
            className=""
            component="div"
          >
            Distance: 
            10
            <br />
            Locations: 
            3
            <TripData
              distance={10}
              maxDistance={1}
            />
            <hr />
          </CardHeader>
          <CardBody
            className=""
            component="div"
          >
            <div
              style={
                Object {
                  "maxHeight": "calc(100vh - 195px)",
                  "overflowY": "auto",
                }
              }
            >
              <Location
                id={1}
                removeDisabled={true}
                removeHandler={[MockFunction]}
                selectHandler={[MockFunction]}
              />
              <Location
                id={2}
                removeDisabled={false}
                removeHandler={[MockFunction]}
                selectHandler={[MockFunction]}
              />
              <Location
                id={3}
                removeDisabled={false}
                removeHandler={[MockFunction]}
                selectHandler={[MockFunction]}
              />
            </div>
          </CardBody>
        </Card>,
        "className": "leaflet-control leaflet-bar",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <CardHeader
              className=""
              component="div"
            >
              Distance: 
              10
              <br />
              Locations: 
              3
              <TripData
                distance={10}
                maxDistance={1}
              />
              <hr />
            </CardHeader>,
            <CardBody
              className=""
              component="div"
            >
              <div
                style={
                  Object {
                    "maxHeight": "calc(100vh - 195px)",
                    "overflowY": "auto",
                  }
                }
              >
                <Location
                  id={1}
                  removeDisabled={true}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
                <Location
                  id={2}
                  removeDisabled={false}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
                <Location
                  id={3}
                  removeDisabled={false}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
              </div>
            </CardBody>,
          ],
          "className": "",
          "component": "article",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "Distance: ",
                "10",
                <br />,
                "Locations: ",
                3,
                <TripData
                  distance={10}
                  maxDistance={1}
                />,
                <hr />,
              ],
              "className": "",
              "component": "div",
            },
            "ref": null,
            "rendered": Array [
              "Distance: ",
              "10",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              "Locations: ",
              3,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "distance": 10,
                  "maxDistance": 1,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "hr",
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <div
                style={
                  Object {
                    "maxHeight": "calc(100vh - 195px)",
                    "overflowY": "auto",
                  }
                }
              >
                <Location
                  id={1}
                  removeDisabled={true}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
                <Location
                  id={2}
                  removeDisabled={false}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
                <Location
                  id={3}
                  removeDisabled={false}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
              </div>,
              "className": "",
              "component": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Location
                    id={1}
                    removeDisabled={true}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />,
                  <Location
                    id={2}
                    removeDisabled={false}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />,
                  <Location
                    id={3}
                    removeDisabled={false}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />,
                ],
                "style": Object {
                  "maxHeight": "calc(100vh - 195px)",
                  "overflowY": "auto",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "function",
                  "props": Object {
                    "id": 1,
                    "removeDisabled": true,
                    "removeHandler": [MockFunction],
                    "selectHandler": [MockFunction],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "2",
                  "nodeType": "function",
                  "props": Object {
                    "id": 2,
                    "removeDisabled": false,
                    "removeHandler": [MockFunction],
                    "selectHandler": [MockFunction],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "3",
                  "nodeType": "function",
                  "props": Object {
                    "id": 3,
                    "removeDisabled": false,
                    "removeHandler": [MockFunction],
                    "selectHandler": [MockFunction],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="leaflet-control leaflet-bar"
        >
          <Card
            className=""
            component="article"
          >
            <CardHeader
              className=""
              component="div"
            >
              Distance: 
              10
              <br />
              Locations: 
              3
              <TripData
                distance={10}
                maxDistance={1}
              />
              <hr />
            </CardHeader>
            <CardBody
              className=""
              component="div"
            >
              <div
                style={
                  Object {
                    "maxHeight": "calc(100vh - 195px)",
                    "overflowY": "auto",
                  }
                }
              >
                <Location
                  id={1}
                  removeDisabled={true}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
                <Location
                  id={2}
                  removeDisabled={false}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
                <Location
                  id={3}
                  removeDisabled={false}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
              </div>
            </CardBody>
          </Card>
        </div>,
        "className": "leaflet-top leaflet-left leaflet-touch",
        "style": Object {
          "zIndex": 500,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Card
            className=""
            component="article"
          >
            <CardHeader
              className=""
              component="div"
            >
              Distance: 
              10
              <br />
              Locations: 
              3
              <TripData
                distance={10}
                maxDistance={1}
              />
              <hr />
            </CardHeader>
            <CardBody
              className=""
              component="div"
            >
              <div
                style={
                  Object {
                    "maxHeight": "calc(100vh - 195px)",
                    "overflowY": "auto",
                  }
                }
              >
                <Location
                  id={1}
                  removeDisabled={true}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
                <Location
                  id={2}
                  removeDisabled={false}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
                <Location
                  id={3}
                  removeDisabled={false}
                  removeHandler={[MockFunction]}
                  selectHandler={[MockFunction]}
                />
              </div>
            </CardBody>
          </Card>,
          "className": "leaflet-control leaflet-bar",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <CardHeader
                className=""
                component="div"
              >
                Distance: 
                10
                <br />
                Locations: 
                3
                <TripData
                  distance={10}
                  maxDistance={1}
                />
                <hr />
              </CardHeader>,
              <CardBody
                className=""
                component="div"
              >
                <div
                  style={
                    Object {
                      "maxHeight": "calc(100vh - 195px)",
                      "overflowY": "auto",
                    }
                  }
                >
                  <Location
                    id={1}
                    removeDisabled={true}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />
                  <Location
                    id={2}
                    removeDisabled={false}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />
                  <Location
                    id={3}
                    removeDisabled={false}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />
                </div>
              </CardBody>,
            ],
            "className": "",
            "component": "article",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  "Distance: ",
                  "10",
                  <br />,
                  "Locations: ",
                  3,
                  <TripData
                    distance={10}
                    maxDistance={1}
                  />,
                  <hr />,
                ],
                "className": "",
                "component": "div",
              },
              "ref": null,
              "rendered": Array [
                "Distance: ",
                "10",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                "Locations: ",
                3,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "distance": 10,
                    "maxDistance": 1,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "hr",
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <div
                  style={
                    Object {
                      "maxHeight": "calc(100vh - 195px)",
                      "overflowY": "auto",
                    }
                  }
                >
                  <Location
                    id={1}
                    removeDisabled={true}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />
                  <Location
                    id={2}
                    removeDisabled={false}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />
                  <Location
                    id={3}
                    removeDisabled={false}
                    removeHandler={[MockFunction]}
                    selectHandler={[MockFunction]}
                  />
                </div>,
                "className": "",
                "component": "div",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Location
                      id={1}
                      removeDisabled={true}
                      removeHandler={[MockFunction]}
                      selectHandler={[MockFunction]}
                    />,
                    <Location
                      id={2}
                      removeDisabled={false}
                      removeHandler={[MockFunction]}
                      selectHandler={[MockFunction]}
                    />,
                    <Location
                      id={3}
                      removeDisabled={false}
                      removeHandler={[MockFunction]}
                      selectHandler={[MockFunction]}
                    />,
                  ],
                  "style": Object {
                    "maxHeight": "calc(100vh - 195px)",
                    "overflowY": "auto",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "1",
                    "nodeType": "function",
                    "props": Object {
                      "id": 1,
                      "removeDisabled": true,
                      "removeHandler": [MockFunction],
                      "selectHandler": [MockFunction],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": "2",
                    "nodeType": "function",
                    "props": Object {
                      "id": 2,
                      "removeDisabled": false,
                      "removeHandler": [MockFunction],
                      "selectHandler": [MockFunction],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": "3",
                    "nodeType": "function",
                    "props": Object {
                      "id": 3,
                      "removeDisabled": false,
                      "removeHandler": [MockFunction],
                      "selectHandler": [MockFunction],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Location List Component should render correctly with no routes 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LocationList
    distance="10"
    domicileId={1}
    loadHandler={[MockFunction]}
    maxDistance={1}
    removeHandler={[MockFunction]}
    route={Array []}
    selectHandler={[MockFunction]}
    ws={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="leaflet-control leaflet-bar"
      >
        <Card
          className=""
          component="article"
        >
          <CardHeader
            className=""
            component="div"
          >
            Click map to add locations
          </CardHeader>
          <CardBody
            className=""
            component="div"
          >
            <Button
              aria-label={null}
              className=""
              component="button"
              isActive={false}
              isBlock={false}
              isDisabled={false}
              isFocus={false}
              isHover={false}
              onClick={[MockFunction]}
              style={
                Object {
                  "width": "100%",
                }
              }
              type="button"
              variant="primary"
            >
              Load 40 European cities
            </Button>
          </CardBody>
        </Card>
      </div>,
      "className": "leaflet-top leaflet-left leaflet-touch",
      "style": Object {
        "zIndex": 500,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Card
          className=""
          component="article"
        >
          <CardHeader
            className=""
            component="div"
          >
            Click map to add locations
          </CardHeader>
          <CardBody
            className=""
            component="div"
          >
            <Button
              aria-label={null}
              className=""
              component="button"
              isActive={false}
              isBlock={false}
              isDisabled={false}
              isFocus={false}
              isHover={false}
              onClick={[MockFunction]}
              style={
                Object {
                  "width": "100%",
                }
              }
              type="button"
              variant="primary"
            >
              Load 40 European cities
            </Button>
          </CardBody>
        </Card>,
        "className": "leaflet-control leaflet-bar",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <CardHeader
              className=""
              component="div"
            >
              Click map to add locations
            </CardHeader>,
            <CardBody
              className=""
              component="div"
            >
              <Button
                aria-label={null}
                className=""
                component="button"
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[MockFunction]}
                style={
                  Object {
                    "width": "100%",
                  }
                }
                type="button"
                variant="primary"
              >
                Load 40 European cities
              </Button>
            </CardBody>,
          ],
          "className": "",
          "component": "article",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Click map to add locations",
              "className": "",
              "component": "div",
            },
            "ref": null,
            "rendered": "Click map to add locations",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Button
                aria-label={null}
                className=""
                component="button"
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[MockFunction]}
                style={
                  Object {
                    "width": "100%",
                  }
                }
                type="button"
                variant="primary"
              >
                Load 40 European cities
              </Button>,
              "className": "",
              "component": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "aria-label": null,
                "children": "Load 40 European cities",
                "className": "",
                "component": "button",
                "isActive": false,
                "isBlock": false,
                "isDisabled": false,
                "isFocus": false,
                "isHover": false,
                "onClick": [MockFunction],
                "style": Object {
                  "width": "100%",
                },
                "type": "button",
                "variant": "primary",
              },
              "ref": null,
              "rendered": "Load 40 European cities",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="leaflet-control leaflet-bar"
        >
          <Card
            className=""
            component="article"
          >
            <CardHeader
              className=""
              component="div"
            >
              Click map to add locations
            </CardHeader>
            <CardBody
              className=""
              component="div"
            >
              <Button
                aria-label={null}
                className=""
                component="button"
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[MockFunction]}
                style={
                  Object {
                    "width": "100%",
                  }
                }
                type="button"
                variant="primary"
              >
                Load 40 European cities
              </Button>
            </CardBody>
          </Card>
        </div>,
        "className": "leaflet-top leaflet-left leaflet-touch",
        "style": Object {
          "zIndex": 500,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Card
            className=""
            component="article"
          >
            <CardHeader
              className=""
              component="div"
            >
              Click map to add locations
            </CardHeader>
            <CardBody
              className=""
              component="div"
            >
              <Button
                aria-label={null}
                className=""
                component="button"
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[MockFunction]}
                style={
                  Object {
                    "width": "100%",
                  }
                }
                type="button"
                variant="primary"
              >
                Load 40 European cities
              </Button>
            </CardBody>
          </Card>,
          "className": "leaflet-control leaflet-bar",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <CardHeader
                className=""
                component="div"
              >
                Click map to add locations
              </CardHeader>,
              <CardBody
                className=""
                component="div"
              >
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  onClick={[MockFunction]}
                  style={
                    Object {
                      "width": "100%",
                    }
                  }
                  type="button"
                  variant="primary"
                >
                  Load 40 European cities
                </Button>
              </CardBody>,
            ],
            "className": "",
            "component": "article",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Click map to add locations",
                "className": "",
                "component": "div",
              },
              "ref": null,
              "rendered": "Click map to add locations",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  onClick={[MockFunction]}
                  style={
                    Object {
                      "width": "100%",
                    }
                  }
                  type="button"
                  variant="primary"
                >
                  Load 40 European cities
                </Button>,
                "className": "",
                "component": "div",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "aria-label": null,
                  "children": "Load 40 European cities",
                  "className": "",
                  "component": "button",
                  "isActive": false,
                  "isBlock": false,
                  "isDisabled": false,
                  "isFocus": false,
                  "isHover": false,
                  "onClick": [MockFunction],
                  "style": Object {
                    "width": "100%",
                  },
                  "type": "button",
                  "variant": "primary",
                },
                "ref": null,
                "rendered": "Load 40 European cities",
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
