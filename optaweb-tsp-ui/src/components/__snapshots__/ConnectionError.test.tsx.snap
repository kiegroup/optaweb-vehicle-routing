// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Connection Error Component should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ConnectionError
    help="help"
    icon={
      <i>
        Icon
      </i>
    }
    message="message"
    title="title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "actions": Array [],
      "children": <TextContent
        className=""
      >
        <Text
          className=""
          component="h3"
        >
          <i>
            Icon
          </i>
          message
          <Text
            className=""
            component="small"
          >
            help
          </Text>
        </Text>
      </TextContent>,
      "className": "",
      "hideTitle": false,
      "isLarge": false,
      "isOpen": true,
      "onClose": [Function],
      "title": "title",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Text
          className=""
          component="h3"
        >
          <i>
            Icon
          </i>
          message
          <Text
            className=""
            component="small"
          >
            help
          </Text>
        </Text>,
        "className": "",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <i>
              Icon
            </i>,
            "message",
            <Text
              className=""
              component="small"
            >
              help
            </Text>,
          ],
          "className": "",
          "component": "h3",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Icon",
            },
            "ref": null,
            "rendered": "Icon",
            "type": "i",
          },
          "message",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "help",
              "className": "",
              "component": "small",
            },
            "ref": null,
            "rendered": "help",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "actions": Array [],
        "children": <TextContent
          className=""
        >
          <Text
            className=""
            component="h3"
          >
            <i>
              Icon
            </i>
            message
            <Text
              className=""
              component="small"
            >
              help
            </Text>
          </Text>
        </TextContent>,
        "className": "",
        "hideTitle": false,
        "isLarge": false,
        "isOpen": true,
        "onClose": [Function],
        "title": "title",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Text
            className=""
            component="h3"
          >
            <i>
              Icon
            </i>
            message
            <Text
              className=""
              component="small"
            >
              help
            </Text>
          </Text>,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <i>
                Icon
              </i>,
              "message",
              <Text
                className=""
                component="small"
              >
                help
              </Text>,
            ],
            "className": "",
            "component": "h3",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Icon",
              },
              "ref": null,
              "rendered": "Icon",
              "type": "i",
            },
            "message",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "help",
                "className": "",
                "component": "small",
              },
              "ref": null,
              "rendered": "help",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
